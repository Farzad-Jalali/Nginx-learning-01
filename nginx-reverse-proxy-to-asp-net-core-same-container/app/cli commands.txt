


Building the image
Build the image with the following command:

docker build -t example/aspnetcore-nginx .

* As you watch the output, you’ll see that Nginx is being installed:



Running the image
To test the image, run an instance of it:

docker run --name test -d -p 8080:80 example/aspnetcore-nginx


Running the image
To test the image, run an instance of it:

docker run --name test -d -p 8080:80 example/aspnetcore-nginx
You should now be able to reach the application at http://localhost:8080.

You can verify that it’s running the Nginx service through curl:

$ curl -s -D - localhost:8080 -o /dev/null
HTTP/1.1 200 OK
Server: nginx/1.6.2
Date: Fri, 24 Feb 2017 14:39:51 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked
Connection: keep-alive
Vary: Accept-Encoding
If you open a shell on the box itself, you can look at both the Nginx and Kestrel services individually.

docker exec -it test bash

# curl -s -D - localhost:80 -o /dev/null
HTTP/1.1 200 OK
Server: nginx/1.6.2
Date: Fri, 24 Feb 2017 14:45:03 GMT
Content-Type: text/html; charset=utf-8
Transfer-Encoding: chunked

# curl -s -D - localhost:5000 -o /dev/null
HTTP/1.1 200 OK
Date: Fri, 24 Feb 2017 14:45:53 GMT
Transfer-Encoding: chunked
Content-Type: text/html; charset=utf-8
Server: Kestrel